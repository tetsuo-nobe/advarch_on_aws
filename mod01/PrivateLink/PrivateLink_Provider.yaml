AWSTemplateFormatVersion: '2010-09-09'
Description: 'Create Apache HTTP Server and MariaDB stack'

# パラメータセクション
Parameters:
  VPCCIDR: 
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: '10.0.0.0/16'
    Description: 'VPC CIDR Block (eg 10.0.0.0/16)'
    Type: String
  PUBLICSUBNET01CIDR: 
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: '10.0.0.0/24'
    Description: 'VPC CIDR Block (eg 10.0.0.0/24)'
    Type: String
  PRIVATESUBNET01CIDR: 
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: '10.0.2.0/24'
    Description: 'VPC CIDR Block (eg 10.0.2.0/24)'
    Type: String
  AllowAccountID:
    Type: String

#マッピングセクション
Mappings:
  RegionMap:
    'ap-northeast-1':
      AMI: 'ami-0dfa284c9d7b2adad'
    'ap-northeast-3':
      AMI: 'ami-0edc148c9a2c0cdcf'

# リソースセクション
Resources:
  # VPC とVPC 関連のリソース
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: PrivateLink-Provider-VPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: 'InternetGateway'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet01:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PUBLICSUBNET01CIDR
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: 'PublicSubnet01'
  PrivateSubnet01:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PRIVATESUBNET01CIDR
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'PrivateSubnet01'
  RouteTableForPublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'RouteTableForPublic'
  RouteTableAssociationPublic1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref RouteTableForPublic
  RoutePublicToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTableForPublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet01
      Tags:
        - Key: Name
          Value: 'NATGateway'
  NatGatewayEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  RouteTableForPrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'RouteTableForPrivate'
  RoutePrivateToNATGateway:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTableForPrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  RouteTableAssociationPrivate1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref RouteTableForPrivate
  APSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName : 'APSG'
      GroupDescription: 'Security Group for AP Server'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'APSG'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: "0.0.0.0/0"
  # EC2 インスタンス用 IAM ロール
  myRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'myRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
      - Key: Name
        Value: 'myRole'
  myRoleProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
      - !Ref myRole
  # EC2 インスタンス
  APServer: 
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: t3.micro
      SecurityGroupIds:
        - !GetAtt APSG.GroupId
      SubnetId: !Ref PrivateSubnet01
      IamInstanceProfile:
        !Ref myRoleProfile
      UserData: !Base64 |
          #!/bin/bash
          dnf update -y
          dnf -y install stress-ng
          dnf -y install httpd
          cat <<EOF >> /var/www/html/index.html
          <H1>Welcome to my Service</H1>
          EOF
          chown -R apache: apache /var/www/html
          service httpd start
          chkconfig httpd on
      Tags:
        - Key: Name
          Value: 'PrivateLink-Provider-Instance'
  # NLB ターゲットグループ
  TargetGroup: 
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      VpcId: !Ref VPC
      Name: "PrivateLink-Provider-TG"
      Protocol: TCP
      Port: 80
      Tags: 
        - Key: Name
          Value: "PrivateLink-Provider-TG"
      Targets: 
        - Id: !Ref APServer
          Port: 80
  # NLB
  NLB: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: "PrivateLink-Provider-NLB"
      Tags: 
        - Key: Name
          Value: "PrivateLink-Provider-NLB"
      Scheme: "internal"
      LoadBalancerAttributes: 
        - Key: "deletion_protection.disabled"
          Value: false
      Subnets: 
        - !Ref PrivateSubnet01
      Type: network

  NLBListener: 
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref NLB
      Port: 80
      Protocol: TCP

  VPCEndpointService:
    Type: AWS::EC2::VPCEndpointService
    Properties: 
      AcceptanceRequired: true
      NetworkLoadBalancerArns:
        - !Ref NLB
      Tags: 
        - Key: Name
          Value: "my-service"
      
  VPCEndpointPermission:
    Type: AWS::EC2::VPCEndpointServicePermissions
    Properties: 
      AllowedPrincipals: 
        - !Sub "arn:aws:iam::${AllowAccountID}:root"
      ServiceId: !Ref VPCEndpointService
      
# アウトプットセクション
Outputs:
  # VPC エンドポイントサービス名
  ServiceName:
    Description: "VPC Endpoint Service Name"
    Value: !Sub "com.amazonaws.vpce.${AWS::Region}.${VPCEndpointService}"
  # ELB (Network Load Balancer) の DNS名
  NLBDNSName:
    Description: "NLB DNS Name"
    Value: !Sub "http://${NLB.DNSName}"
